# Install golang
  https://go.dev/doc/install

# Install protobuf compiler on linux (no need to do this if you won't change crimemap_service.proto)
  sudo apt install protobuf-compiler
  sudo apt install golang-goprotobuf-dev

# Install go-protobuf plugin (no need to do this if you won't change crimemap_service.proto)
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest

# Install bazel 
  https://bazel.build/install

# Generate BUILD files (no need to do this if you haven't change golang code)
  bazel run //:gazelle

# Compile protobuf (no need to do this if you haven't change crimemap_service.proto)
## take crimemap_service.proto for example
  protoc analytics/online/proto/crimemap_service/crimemap_service.proto -I. --go_out=:.

# Build the whole project
  bazel build //analytics/online/server/cmd

# Build and run the whole project
  bazel run //analytics/online/server/cmd

# Add new package;
## For more information, see https://github.com/bazelbuild/rules_nodejs/blob/stable/docs/dependencies.md
  bazel run @yarn//:yarn -- add $PACKAGE_NAME

# Clear useless modules from dependencies
  go tidy

# Add an external go-dependency
## If the source code of $MODULE_NAME has go.mod then
### 1. add $MODULE_NAME to go.mod
  go get $MODULE_NAME
### 2. add $MODULE_NAME an external bazel-repository
  bazel run //:gazelle update-repos $MODULE_NAME
### 3. update BUILD.bazel for those who depend on $MODULE_NAME
  bazel run //:gazelle
## else
### 1. add $MODULE_NAME to go.mod
  go get $MODULE_NAME
### 2. download the source code to vendor dir, the relative path of the go-module to vendor dir should match the module name
### 3. add the following line to repalce in go.mod,
###    then golang will import this module from local dir
  $MODULE_NAME => ./vendor/$MODULE_NAME
### 4. update BUILD.bazel for those who depend on $MODULE_NAME
  bazel run //:gazelle
### 5. you can compile the project now, but some errors will occur which can be solved by troubleshooting section in this README

# WARNING
- DONOT RUN `go mod vendor`: YOU CAN RUN IT ONLY IF YOU ARE ADDING AN EXTERNAL MODULE WHICH DOES NOT HAVE go.mod

# Troubleshooting
## After run go vendor, it will add all dependencies into vendor, leading gazelle works incorrectly.
## Those modules are typically direct dependencies. 
## You can delect those modules in vendor if gazelle generates a BUILD.bazel refer to them in vendor dir.
## For example, a known module has this behavior is google.golang.org/grpc, 
## you shoud remove vendor/google.golang.org/grpc everytime after you run go vendor.
## However, trino should be referred locally as "//vendor/github.com/trinodb/trino-go-client/trino".
